/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Client;

/**
 * @author PlayDK
 */
public enum MapleJob {

    初心者(0),
    初心者_影武(0, 1),
    初心者_重砲(0, 2),
    初心者_開拓(0, 3),
    劍士(100),
    狂戰士(110),
    十字軍(111),
    英雄(112),
    見習騎士(120),
    騎士(121),
    聖騎士(122),
    槍騎兵(130),
    嗜血狂騎(131),
    黑騎士(132),
    法師(200),
    火毒巫師(210),
    火毒魔導士(211),
    火毒大魔導士(212),
    冰雷巫師(220),
    冰雷魔導士(221),
    冰雷大魔導士(222),
    僧侶(230),
    祭司(231),
    主教(232),
    弓箭手(300),
    開拓者1轉(301, 3),
    獵人(310),
    遊俠(311),
    箭神(312),
    弩弓手(320),
    狙擊手(321),
    神射手(322),
    開拓者2轉(330, 3),
    開拓者3轉(331, 3),
    開拓者4轉(332, 3),
    盜賊(400),
    盜賊_影武(400, 1),
    刺客(410),
    暗殺者(411),
    夜使者(412),
    俠盜(420),
    神偷(421),
    暗影神偷(422),
    下忍(430, 1),//20
    中忍(431, 1),//30
    上忍(432, 1),//45
    隱忍(433, 1),//60
    影武者(434, 1),//100
    海盜(500),
    砲手(501, 2),
    打手(510),
    格鬥家(511),
    拳霸(512),
    槍手(520),
    神槍手(521),
    槍神(522),
    重砲兵(530, 2),
    重砲兵隊長(531, 2),
    重砲指揮官(532, 2),
    MANAGER(800),
    管理員(900),
    貴族(1000),
    聖魂劍士1轉(1100),
    聖魂劍士2轉(1110),
    聖魂劍士3轉(1111),
    聖魂劍士4轉(1112),
    烈焰巫師1轉(1200),
    烈焰巫師2轉(1210),
    烈焰巫師3轉(1211),
    烈焰巫師4轉(1212),
    破風使者1轉(1300),
    破風使者2轉(1310),
    破風使者3轉(1311),
    破風使者4轉(1312),
    暗夜行者1轉(1400),
    暗夜行者2轉(1410),
    暗夜行者3轉(1411),
    暗夜行者4轉(1412),
    閃雷悍將1轉(1500),
    閃雷悍將2轉(1510),
    閃雷悍將3轉(1511),
    閃雷悍將4轉(1512),
    傳說(2000),
    龍魔導士(2001),
    精靈遊俠(2002),
    幻影俠盜(2003),
    夜光(2004),
    隱月(2005),
    狂狼勇士1轉(2100),
    狂狼勇士2轉(2110),
    狂狼勇士3轉(2111),
    狂狼勇士4轉(2112),
    龍魔導士1轉(2200),
    龍魔導士2轉(2211),
    龍魔導士3轉(2214),
    龍魔導士4轉(2217),
    精靈遊俠1轉(2300),
    精靈遊俠2轉(2310),
    精靈遊俠3轉(2311),
    精靈遊俠4轉(2312),
    幻影俠盜1轉(2400),
    幻影俠盜2轉(2410),
    幻影俠盜3轉(2411),
    幻影俠盜4轉(2412),
    隱月1轉(2500),
    隱月2轉(2510),
    隱月3轉(2511),
    隱月4轉(2512),
    夜光1轉(2700),
    夜光2轉(2710),
    夜光3轉(2711),
    夜光4轉(2712),
    市民(3000),
    惡魔(3001),
    傑諾(3002),
    惡魔殺手1轉(3100),
    惡魔殺手2轉(3110),
    惡魔殺手3轉(3111),
    惡魔殺手4轉(3112),
    惡魔復仇者1轉(3101),
    惡魔復仇者2轉(3120),
    惡魔復仇者3轉(3121),
    惡魔復仇者4轉(3122),
    煉獄巫師1轉(3200),
    煉獄巫師2轉(3210),
    煉獄巫師3轉(3211),
    煉獄巫師4轉(3212),
    狂豹獵人1轉(3300),
    狂豹獵人2轉(3310),
    狂豹獵人3轉(3311),
    狂豹獵人4轉(3312),
    機甲戰神1轉(3500),
    機甲戰神2轉(3510),
    機甲戰神3轉(3511),
    機甲戰神4轉(3512),
    傑諾1轉(3600),
    傑諾2轉(3610),
    傑諾3轉(3611),
    傑諾4轉(3612),
    爆拳槍神1轉(3700),
    爆拳槍神2轉(3710),
    爆拳槍神3轉(3711),
    爆拳槍神4轉(3712),
    劍豪(4001),
    陰陽師(4002),
    劍豪1轉(4100),
    劍豪2轉(4110),
    劍豪3轉(4111),
    劍豪4轉(4112),
    陰陽師1轉(4200),
    陰陽師2轉(4210),
    陰陽師3轉(4211),
    陰陽師4轉(4212),
    米哈逸(5000),
    米哈逸1轉(5100),
    米哈逸2轉(5110),
    米哈逸3轉(5111),
    米哈逸4轉(5112),
    凱撒(6000),
    天使破壞者(6001),
    卡蒂娜(6002),
    凱殷(6003),
    凱撒1轉(6100),
    凱撒2轉(6110),
    凱撒3轉(6111),
    凱撒4轉(6112),
    凱殷1轉(6300),
    凱殷2轉(6310),
    凱殷3轉(6311),
    凱殷4轉(6312),
    卡蒂娜1轉(6400),
    卡蒂娜2轉(6410),
    卡蒂娜3轉(6411),
    卡蒂娜4轉(6412),
    天使破壞者1轉(6500),
    天使破壞者2轉(6510),
    天使破壞者3轉(6511),
    天使破壞者4轉(6512),
    神之子JR(10000),
    神之子10100(10100),
    神之子10110(10110),
    神之子10111(10111),
    神之子(10112),
    皮卡啾(13000),
    雪吉拉(13001),
    皮卡啾1轉(13100),
    雪吉拉1轉(13500),
    凱內西斯(14000),
    凱內西斯1轉(14200),
    凱內西斯2轉(14210),
    凱內西斯3轉(14211),
    凱內西斯4轉(14212),
    伊利恩(15000),
    亞克(15001),
    阿戴爾(15002),
    卡莉(15003),
    阿戴爾1轉(15100),
    阿戴爾2轉(15110),
    阿戴爾3轉(15111),
    阿戴爾4轉(15112),
    伊利恩1轉(15200),
    伊利恩2轉(15210),
    伊利恩3轉(15211),
    伊利恩4轉(15212),
    卡莉1轉(15400),
    卡莉2轉(15410),
    卡莉3轉(15411),
    卡莉4轉(15412),
    亞克1轉(15500),
    亞克2轉(15510),
    亞克3轉(15511),
    亞克4轉(15512),
    虎影(16000),
    菈菈(16001),
    菈菈1轉(16200),
    菈菈2轉(16210),
    菈菈3轉(16211),
    菈菈4轉(16212),
    虎影1轉(16400),
    虎影2轉(16410),
    虎影3轉(16411),
    虎影4轉(16412),
    墨玄(17000),
    墨玄1轉(17500),
    墨玄2轉(17510),
    墨玄3轉(17511),
    墨玄4轉(17512),
    琳恩(17001),
    琳恩1轉(17200),
    琳恩2轉(17210),
    琳恩3轉(17211),
    琳恩4轉(17212),
    ;

    private final int jobID, jobSub;

    MapleJob(int id) {
        this(id, 0);
    }

    MapleJob(int id, int sub) {
        this.jobID = id;
        this.jobSub = sub;
    }

    public int getId() {
        return jobID;
    }

    public static int getIdWithSub(int jobID, int jobSub) {
        return jobSub != 0 && (jobID == 0 || jobID == 400) ? jobID + jobSub : jobID;
    }

    public int getIdWithSub() {
        return getIdWithSub(jobID, jobSub);
    }

    public static MapleJob getById(int id) {
        for (MapleJob l : values()) {
            if (l.getIdWithSub() == id) {
                return l;
            }
        }
        return null;
    }

    public static String getTrueNameById(int id) {
        MapleJob job = getById(id);
        return job == null ? "" : job.getTrueName();
    }

    public static String getNameById(int id) {
        MapleJob job = getById(id);
        return job == null ? "" : job.getName();
    }

    public final int getSub() {
        return jobSub;
    }

    public final int getNumber() {
        String jNumber = name().substring(name().length() - 2, name().length() - 1);
        if (jNumber.matches("^\\d+$")) {
            return Integer.parseInt(jNumber);
        }
        int job = jobID % 1000;
        if (job < 10) {
            return 0; //新手 beginner
        } else if ((job / 10) % 10 == 0) {
            return 1;
        } else {
            return 2 + (job % 10);
        }
    }

    public final String getTrueName() {
        switch (this) {
            case 火毒巫師:
                return "巫師（火，毒）";
            case 火毒魔導士:
                return "魔導士（火，毒）";
            case 火毒大魔導士:
                return "大魔導士（火，毒）";
            case 冰雷巫師:
                return "巫師（冰，雷）";
            case 冰雷魔導士:
                return "魔導士（冰，雷）";
            case 冰雷大魔導士:
                return "大魔導士（冰，雷）";
            case 盜賊_影武:
                return "盜賊";
            case 初心者_影武:
            case 初心者_重砲:
            case 初心者_開拓:
                return "初心者";
        }
        String jName = name();
        if (jName.endsWith("轉")) {
            jName = jName.substring(0, jName.length() - 2);
        }
        return jName;
    }

    public final String getName() {
        String jTrueName = getTrueName();
        String jName = name();
        if (jName.split("_").length > 1) {
            jTrueName += "(" + jName.split("_")[1] + ")";
        } else if (jName.endsWith("轉")) {
            switch (getNumber()) {
                case 1:
                    jTrueName += "(一轉)";
                    break;
                case 2:
                    jTrueName += "(二轉)";
                    break;
                case 3:
                    jTrueName += "(三轉)";
                    break;
                case 4:
                    jTrueName += "(四轉)";
                    break;
            }
        }
        return jTrueName;
    }
}
